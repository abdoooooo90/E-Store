@using BLL.Models.ProductDtos
@model IEnumerable<ProductDto>
@{
    ViewData["Title"] = "Shop - Furni";
    Layout = "~/Views/Shared/_FurniLayout.cshtml";
}

<!-- Start Hero Section -->
<div class="hero">
    <div class="container">
        <div class="row justify-content-between">
            <div class="col-lg-5">
                <div class="intro-excerpt">
                    <h1>Shop</h1>
                    <p class="mb-4">Discover our amazing collection of furniture</p>
                </div>
            </div>
            <div class="col-lg-7">
            </div>
        </div>
    </div>
</div>
<!-- End Hero Section -->

<!-- Enhanced Search & Filter Section -->
<div class="search-filter-section py-5">
    <div class="container">
        <div class="search-filter-card">
            <div class="row align-items-center">
                <div class="col-lg-8 col-md-7">
                    <form method="get" action="@Url.Action("Shop", "Furni")" class="search-form" id="filterForm">
                        <div class="row g-3 align-items-end">
                            <!-- Search Input -->
                            <div class="col-lg-6 col-md-12">
                                <div class="search-input-wrapper">
                                    <i class="fas fa-search search-icon"></i>
                                    <input type="text" class="form-control search-input" 
                                           id="searchTerm" name="searchTerm" 
                                           value="@ViewBag.SearchTerm" 
                                           placeholder="البحث عن المنتجات...">
                                </div>
                            </div>
                            
                            <!-- Category Filter -->
                            <div class="col-lg-6 col-md-12">
                                <div class="category-wrapper">
                                    <select class="form-select category-select" id="categoryId" name="categoryId">
                                        <option value="">جميع الفئات</option>
                                        @if (ViewBag.Categories != null)
                                        {
                                            @foreach (var category in ViewBag.Categories)
                                            {
                                                <option value="@category.Id" selected="@(ViewBag.SelectedCategoryId?.ToString() == category.Id.ToString())">
                                                    @category.Name
                                                </option>
                                            }
                                        }
                                    </select>
                                    <i class="fas fa-chevron-down select-arrow"></i>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                
                <!-- Filter Actions -->
                <div class="col-lg-4 col-md-5">
                    <div class="filter-actions">
                        <button type="button" class="btn btn-primary filter-btn" onclick="document.getElementById('filterForm').submit()">
                            <i class="fas fa-filter me-2"></i>
                            تطبيق الفلتر
                        </button>
                        <a href="@Url.Action("Shop", "Furni")" class="btn btn-outline-secondary reset-btn">
                            <i class="fas fa-undo me-2"></i>
                            إعادة تعيين
                        </a>
                    </div>
                </div>
            </div>
            
            <!-- Active Filters Display -->
            @if (!string.IsNullOrEmpty(ViewBag.SearchTerm?.ToString()) || ViewBag.SelectedCategoryId != null)
            {
                <div class="active-filters mt-3">
                    <span class="filter-label">الفلاتر النشطة:</span>
                    @if (!string.IsNullOrEmpty(ViewBag.SearchTerm?.ToString()))
                    {
                        <span class="filter-tag">
                            <i class="fas fa-search me-1"></i>
                            البحث: "@ViewBag.SearchTerm"
                            <a href="@Url.Action("Shop", "Furni", new { categoryId = ViewBag.SelectedCategoryId })" class="remove-filter">
                                <i class="fas fa-times"></i>
                            </a>
                        </span>
                    }
                    @if (ViewBag.SelectedCategoryId != null && ViewBag.Categories != null)
                    {
                        @foreach (var category in ViewBag.Categories)
                        {
                            @if (category.Id.ToString() == ViewBag.SelectedCategoryId?.ToString())
                            {
                                <span class="filter-tag">
                                    <i class="fas fa-tag me-1"></i>
                                    الفئة: @category.Name
                                    <a href="@Url.Action("Shop", "Furni", new { searchTerm = ViewBag.SearchTerm })" class="remove-filter">
                                        <i class="fas fa-times"></i>
                                    </a>
                                </span>
                            }
                        }
                    }
                </div>
            }
        </div>
    </div>
</div>

<div class="untree_co-section product-section before-footer-section">
    <div class="container">
        <div class="row">
            <!-- Products Count -->
            <div class="col-12 mb-4">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        @if (Model != null && Model.Any())
                        {
                            <span>Showing @Model.Count() products</span>
                        }
                        else
                        {
                            <span>No products found</span>
                        }
                    </h5>
                </div>
            </div>
            
            @if (Model != null && Model.Any())
            {
                @foreach (var product in Model)
                {
                    <div class="col-12 col-md-4 col-lg-3 mb-5">
                        <div class="product-item-wrapper position-relative">
                            <!-- Wishlist Heart Icon -->
                            <button class="btn btn-link position-absolute wishlist-btn" 
                                    data-product-id="@product.Id" 
                                    style="top: 10px; right: 10px; z-index: 10; background: none; border: none; padding: 0;">
                                <i class="fas fa-heart text-muted wishlist-icon" style="font-size: 1.5rem; text-shadow: 0 0 3px rgba(255,255,255,0.8);"></i>
                            </button>
                            
                            <a class="product-item" href="@Url.Action("ProductDetails", "Furni", new { id = product.Id })">
                                <img src="@(!string.IsNullOrEmpty(product.ImageUrl) ? product.ImageUrl : "~/furni/images/product-1.png")" class="img-fluid product-thumbnail">
                                <h3 class="product-title">@product.Name</h3>
                                <strong class="product-price">@product.Price.ToString("F2") EGP</strong>
                                
                                @if (!product.IsAvailable || product.Stock <= 0)
                                {
                                    <div class="unavailable-badge">
                                        <small class="text-muted">Currently Unavailable</small>
                                    </div>
                                }
                                
                                <span class="icon-cross add-to-cart-btn" data-product-id="@product.Id" data-product-name="@product.Name" data-product-price="@product.Price">
                                    <img src="~/furni/images/cross.svg" class="img-fluid">
                                </span>
                            </a>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="col-12 text-center">
                    <div class="alert alert-info">
                        <h4>No Products Found</h4>
                        <p>No products match the specified search criteria. Please try different filters or clear filters to view all products.</p>
                        <a href="@Url.Action("Shop", "Furni")" class="btn btn-primary mt-2">
                            <i class="fas fa-refresh me-1"></i>View All Products
                        </a>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<style>
/* Search & Filter Section Styling */
.search-filter-section {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    border-bottom: 1px solid #dee2e6;
}

.search-filter-card {
    background: white;
    border-radius: 20px;
    padding: 2rem;
    box-shadow: 0 10px 40px rgba(0,0,0,0.08);
    border: 1px solid rgba(0,0,0,0.05);
    position: relative;
    overflow: hidden;
}

.search-filter-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, #3b82f6, #8b5cf6, #06b6d4);
}

/* Search Input Styling */
.search-input-wrapper {
    position: relative;
}

.search-input {
    border: 2px solid #e5e7eb;
    border-radius: 15px;
    padding: 1rem 1rem 1rem 3rem;
    font-size: 1rem;
    transition: all 0.3s ease;
    background: #f9fafb;
    direction: rtl;
}

.search-input:focus {
    border-color: #3b82f6;
    box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.1);
    background: white;
    transform: translateY(-2px);
}

.search-icon {
    position: absolute;
    right: 1rem;
    top: 50%;
    transform: translateY(-50%);
    color: #6b7280;
    font-size: 1.1rem;
    z-index: 10;
}

/* Category Select Styling */
.category-wrapper {
    position: relative;
}

.category-select {
    border: 2px solid #e5e7eb;
    border-radius: 15px;
    padding: 1rem 3rem 1rem 1rem;
    font-size: 1rem;
    background: #f9fafb;
    appearance: none;
    transition: all 0.3s ease;
    direction: rtl;
}

.category-select:focus {
    border-color: #3b82f6;
    box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.1);
    background: white;
    transform: translateY(-2px);
}

.select-arrow {
    position: absolute;
    left: 1rem;
    top: 50%;
    transform: translateY(-50%);
    color: #6b7280;
    pointer-events: none;
    font-size: 0.9rem;
}

/* Filter Actions */
.filter-actions {
    display: flex;
    gap: 1rem;
    justify-content: flex-end;
}

.filter-btn {
    background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
    border: none;
    border-radius: 15px;
    padding: 1rem 2rem;
    font-weight: 600;
    color: white;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(59, 130, 246, 0.2);
}

.filter-btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(59, 130, 246, 0.3);
    background: linear-gradient(135deg, #1d4ed8 0%, #1e40af 100%);
}

.reset-btn {
    border: 2px solid #e5e7eb;
    border-radius: 15px;
    padding: 1rem 2rem;
    font-weight: 600;
    color: #6b7280;
    background: white;
    transition: all 0.3s ease;
}

.reset-btn:hover {
    border-color: #f87171;
    color: #ef4444;
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(239, 68, 68, 0.15);
}

/* Active Filters */
.active-filters {
    padding-top: 1.5rem;
    border-top: 1px solid #f3f4f6;
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 0.75rem;
}

.filter-label {
    font-weight: 600;
    color: #374151;
    font-size: 0.9rem;
}

.filter-tag {
    background: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%);
    color: #1e40af;
    padding: 0.5rem 1rem;
    border-radius: 25px;
    font-size: 0.85rem;
    font-weight: 500;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    border: 1px solid #93c5fd;
}

.remove-filter {
    color: #ef4444;
    text-decoration: none;
    margin-left: 0.5rem;
    padding: 0.2rem;
    border-radius: 50%;
    transition: all 0.2s ease;
}

.remove-filter:hover {
    background: #fee2e2;
    color: #dc2626;
}

/* Responsive Design */
@@media (max-width: 768px) {
    .search-filter-card {
        padding: 1.5rem;
        border-radius: 15px;
    }
    
    .filter-actions {
        justify-content: center;
        margin-top: 1rem;
    }
    
    .filter-btn,
    .reset-btn {
        padding: 0.8rem 1.5rem;
        font-size: 0.9rem;
    }
    
    .search-input,
    .category-select {
        padding: 0.8rem 1rem 0.8rem 2.5rem;
        font-size: 0.9rem;
    }
    
    .active-filters {
        justify-content: center;
        text-align: center;
    }
}

@@media (max-width: 576px) {
    .filter-actions {
        flex-direction: column;
        width: 100%;
    }
    
    .filter-btn,
    .reset-btn {
        width: 100%;
        text-align: center;
    }
}

.product-item-wrapper:hover .wishlist-btn {
    transform: scale(1.1);
    transition: transform 0.2s ease;
}

.wishlist-btn:hover {
    background: none !important;
}

.wishlist-icon.text-danger {
    color: #dc3545 !important;
}

.wishlist-icon.text-muted {
    color: #6c757d !important;
}

.unavailable-badge {
    background-color: rgba(108, 117, 125, 0.1);
    border-radius: 4px;
    padding: 2px 8px;
    margin-top: 5px;
    display: inline-block;
}

.product-item-wrapper:has(.unavailable-badge) .product-item {
    opacity: 0.7;
}

.product-item-wrapper:has(.unavailable-badge) .product-thumbnail {
    filter: grayscale(30%);
}

.add-to-cart-btn {
    cursor: pointer;
    transition: transform 0.2s ease;
}

.add-to-cart-btn:hover {
    transform: scale(1.1);
}

.product-item-wrapper:has(.unavailable-badge) .add-to-cart-btn {
    pointer-events: none;
    opacity: 0.5;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Initialize wishlist states and cart count
    loadWishlistStates();
    updateCartCount();
    
    // Wishlist button click handlers
    document.querySelectorAll('.wishlist-btn').forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            
            const productId = this.dataset.productId;
            const icon = this.querySelector('.wishlist-icon');
            const isInWishlist = icon.classList.contains('text-danger');
            
            if (isInWishlist) {
                removeFromWishlist(productId, icon);
            } else {
                addToWishlist(productId, icon);
            }
        });
    });

    // Add to cart button click handlers
    document.querySelectorAll('.add-to-cart-btn').forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            
            const productId = this.dataset.productId;
            const productName = this.dataset.productName;
            const productPrice = this.dataset.productPrice;
            
            addToCart(productId, productName, productPrice);
        });
    });
});

function loadWishlistStates() {
    document.querySelectorAll('.wishlist-btn').forEach(button => {
        const productId = button.dataset.productId;
        
        fetch(`/Wishlist/IsInWishlist?productId=${productId}`)
            .then(response => response.json())
            .then(data => {
                const icon = button.querySelector('.wishlist-icon');
                if (data.isInWishlist) {
                    icon.classList.remove('text-muted');
                    icon.classList.add('text-danger');
                }
            })
            .catch(error => console.error('Error checking wishlist status:', error));
    });
}

function addToWishlist(productId, icon) {
    fetch('/Wishlist/Add', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
        },
        body: JSON.stringify({ productId: parseInt(productId) })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            icon.classList.remove('text-muted');
            icon.classList.add('text-danger');
            updateWishlistCount();
            showToast('Product added to wishlist!', 'success');
        } else {
            if (data.message && data.message.includes('log in')) {
                // Redirect to login page
                window.location.href = '/Account/Auth';
            } else {
                showToast(data.message || 'Failed to add to wishlist', 'error');
            }
        }
    })
    .catch(error => {
        console.error('Error adding to wishlist:', error);
        showToast('An error occurred', 'error');
    });
}

function removeFromWishlist(productId, icon) {
    fetch('/Wishlist/Remove', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
        },
        body: JSON.stringify({ productId: parseInt(productId) })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            icon.classList.remove('text-danger');
            icon.classList.add('text-muted');
            updateWishlistCount();
            showToast('Product removed from wishlist!', 'success');
        } else {
            showToast(data.message || 'Failed to remove from wishlist', 'error');
        }
    })
    .catch(error => {
        console.error('Error removing from wishlist:', error);
        showToast('An error occurred', 'error');
    });
}

function addToCart(productId, productName, productPrice) {
    const requestData = {
        ProductId: parseInt(productId),
        Quantity: 1
    };

    fetch('/Cart/AddToCart', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
        },
        body: JSON.stringify(requestData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            updateCartCount();
            showToast(`تم إضافة ${productName} إلى السلة بنجاح!`, 'success');
            
            // If user is on cart page, trigger update
            if (window.location.pathname.includes('/Cart')) {
                setTimeout(function() {
                    if (typeof updateCart === 'function') {
                        updateCart();
                    } else {
                        location.reload();
                    }
                }, 500);
            }
        } else {
            if (data.message && data.message.includes('تسجيل الدخول')) {
                window.location.href = '/Account/Auth';
            } else {
                showToast(data.message || 'فشل في إضافة المنتج للسلة', 'error');
            }
        }
    })
    .catch(error => {
        console.error('Error adding to cart:', error);
        showToast('حدث خطأ أثناء إضافة المنتج للسلة', 'error');
    });
}

function updateWishlistCount() {
    fetch('/Wishlist/GetCount')
        .then(response => response.json())
        .then(data => {
            const wishlistBadge = document.querySelector('#wishlist-count');
            if (wishlistBadge) {
                wishlistBadge.textContent = data.count;
                if (data.count > 0) {
                    wishlistBadge.style.display = 'inline';
                } else {
                    wishlistBadge.style.display = 'none';
                }
            }
        })
        .catch(error => console.error('Error updating wishlist count:', error));
}

function updateCartCount() {
    fetch('/Cart/GetCartCount')
        .then(response => response.json())
        .then(data => {
            const cartBadge = document.querySelector('#cart-count');
            if (cartBadge) {
                cartBadge.textContent = data.count;
                if (data.count > 0) {
                    cartBadge.style.display = 'inline';
                } else {
                    cartBadge.style.display = 'none';
                }
            }
        })
        .catch(error => console.error('Error updating cart count:', error));
}

function showToast(message, type) {
    // Create toast element
    const toast = document.createElement('div');
    toast.className = `alert alert-${type === 'success' ? 'success' : 'danger'} position-fixed`;
    toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
    toast.innerHTML = `
        <div class="d-flex align-items-center">
            <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'} me-2"></i>
            <span>${message}</span>
            <button type="button" class="btn-close ms-auto" onclick="this.parentElement.parentElement.remove()"></button>
        </div>
    `;
    
    document.body.appendChild(toast);
    
    // Auto remove after 3 seconds
    setTimeout(() => {
        if (toast.parentElement) {
            toast.remove();
        }
    }, 3000);
}
</script>
