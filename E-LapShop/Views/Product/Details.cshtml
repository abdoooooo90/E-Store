@model BLL.Models.ProductDtos.ProductDetailsDto

@{
    ViewBag.Title = Model.Name;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container py-5">
    <div class="row">
        <div class="col-lg-6">
            <div class="card">
                <img src="@(!string.IsNullOrEmpty(Model.ImageUrl) ? Model.ImageUrl : "https://dummyimage.com/600x400/dee2e6/6c757d.jpg")" 
                     class="card-img-top" alt="@Model.Name" style="height: 400px; object-fit: cover;">
            </div>
            
            @if (Model.Images != null && Model.Images.Any())
            {
                <div class="row mt-3">
                    @foreach (var image in Model.Images.Take(4))
                    {
                        <div class="col-3">
                            <img src="@image" class="img-thumbnail" alt="@Model.Name" style="height: 80px; object-fit: cover; cursor: pointer;" 
                                 onclick="changeMainImage('@image')">
                        </div>
                    }
                </div>
            }
        </div>
        
        <div class="col-lg-6">
            <div class="card">
                <div class="card-body">
                    <h1 class="card-title">@Model.Name</h1>
                    <h5 class="text-muted mb-3">@Model.Brand</h5>
                    
                    <div class="mb-3">
                        <span class="badge bg-secondary">@Model.CategoryName</span>
                    </div>
                    
                    <p class="card-text">@Model.Description</p>
                    
                    <div class="row mb-3">
                        <div class="col-6">
                            <h3 class="text-success">@Model.Price.ToString("F2") EGP</h3>
                        </div>
                        <div class="col-6">
                            <span class="badge @(Model.Stock > 0 ? "bg-success" : "bg-danger")">
                                @(Model.Stock > 0 ? $"{Model.Stock} in stock" : "Out of stock")
                            </span>
                        </div>
                    </div>
                    
                    @if (Model.Stock > 0)
                    {
                        <div class="row mb-3">
                            <div class="col-4">
                                <label for="quantity" class="form-label">Quantity:</label>
                                <input type="number" id="quantity" class="form-control" value="1" min="1" max="@Model.Stock">
                            </div>
                        </div>
                        
                        <div class="d-grid gap-2 d-md-flex justify-content-md-start">
                            <button type="button" class="btn btn-primary btn-lg me-md-2 add-to-cart-btn" data-product-id="@Model.Id">
                                <i class="fas fa-shopping-cart"></i> Add to Cart
                            </button>
                            <button type="button" class="btn btn-outline-danger btn-lg wishlist-btn-details" data-product-id="@Model.Id">
                                <i class="fas fa-heart wishlist-icon-details text-muted"></i> 
                                <span class="wishlist-text">Add to Wishlist</span>
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            <strong>Out of Stock!</strong> This product is currently unavailable.
                        </div>
                    }
                    
                    <hr class="my-4">
                    
                    <div class="row text-center">
                        <div class="col-6">
                            <small class="text-muted">Total Orders</small>
                            <div class="fw-bold">@Model.TotalOrders</div>
                        </div>
                        <div class="col-6">
                            <small class="text-muted">In Carts</small>
                            <div class="fw-bold">@Model.TotalInCarts</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Success/Error Messages -->
<div id="messageContainer" class="position-fixed top-0 end-0 p-3" style="z-index: 1050;"></div>

@section Scripts {
    <script>
        function changeMainImage(imageSrc) {
            document.querySelector('.card-img-top').src = imageSrc;
        }
        
        function addToCart(productId) {
            const quantity = document.getElementById('quantity').value;
            
            fetch('/Cart/AddToCart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: JSON.stringify({
                    productId: productId,
                    quantity: parseInt(quantity)
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showMessage('Product added to cart successfully!', 'success');
                    updateCartCount();
                } else {
                    showMessage(data.message || 'Failed to add product to cart.', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showMessage('An error occurred while adding to cart.', 'error');
            });
        }
        
        function addToWishlist(productId) {
            fetch('/Wishlist/Add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: JSON.stringify({
                    productId: productId
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showMessage('Product added to wishlist!', 'success');
                    updateWishlistCount();
                } else {
                    showMessage(data.message || 'Failed to add product to wishlist.', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showMessage('An error occurred while adding to wishlist.', 'error');
            });
        }
        
        function showMessage(message, type) {
            const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
            const messageHtml = `
                <div class="alert ${alertClass} alert-dismissible fade show" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            document.getElementById('messageContainer').innerHTML = messageHtml;
            
            // Auto-hide after 3 seconds
            setTimeout(() => {
                const alert = document.querySelector('#messageContainer .alert');
                if (alert) {
                    alert.remove();
                }
            }, 3000);
        }
        
        function updateCartCount() {
            fetch('/Cart/GetCartCount')
                .then(response => response.json())
                .then(data => {
                    const cartBadge = document.querySelector('#cartCount');
                    if (cartBadge) {
                        cartBadge.textContent = data.count;
                    }
                });
        }
        
        function updateWishlistCount() {
            fetch('/Wishlist/GetCount')
                .then(response => response.json())
                .then(data => {
                    const wishlistBadge = document.querySelector('#wishlistCount');
                    if (wishlistBadge) {
                        wishlistBadge.textContent = data.count;
                    }
                });
        }

        // Initialize wishlist state and add event listeners
        document.addEventListener('DOMContentLoaded', function() {
            const productId = @Model.Id;
            
            // Check initial wishlist state
            fetch(`/Wishlist/IsInWishlist?productId=${productId}`)
                .then(response => response.json())
                .then(data => {
                    const icon = document.querySelector('.wishlist-icon-details');
                    const text = document.querySelector('.wishlist-text');
                    const button = document.querySelector('.wishlist-btn-details');
                    
                    if (data.isInWishlist) {
                        icon.classList.remove('text-muted');
                        icon.classList.add('text-danger');
                        text.textContent = 'Remove from Wishlist';
                        button.classList.remove('btn-outline-danger');
                        button.classList.add('btn-danger');
                    }
                })
                .catch(error => console.error('Error checking wishlist status:', error));
            
            // Wishlist button click handler
            document.querySelector('.wishlist-btn-details').addEventListener('click', function(e) {
                e.preventDefault();
                const icon = this.querySelector('.wishlist-icon-details');
                const text = this.querySelector('.wishlist-text');
                const isInWishlist = icon.classList.contains('text-danger');
                
                if (isInWishlist) {
                    removeFromWishlistDetails(productId, icon, text, this);
                } else {
                    addToWishlistDetails(productId, icon, text, this);
                }
            });
            
            // Add to cart button handler
            document.querySelector('.add-to-cart-btn').addEventListener('click', function(e) {
                e.preventDefault();
                const quantity = document.querySelector('#quantity').value;
                addToCartWithQuantity(productId, quantity);
            });
        });

        function addToWishlistDetails(productId, icon, text, button) {
            fetch('/Wishlist/Add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                },
                body: JSON.stringify({ productId: parseInt(productId) })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    icon.classList.remove('text-muted');
                    icon.classList.add('text-danger');
                    text.textContent = 'Remove from Wishlist';
                    button.classList.remove('btn-outline-danger');
                    button.classList.add('btn-danger');
                    updateWishlistCount();
                    showMessage('Product added to wishlist!', 'success');
                } else {
                    showMessage(data.message || 'Failed to add to wishlist', 'danger');
                }
            })
            .catch(error => {
                console.error('Error adding to wishlist:', error);
                showMessage('An error occurred', 'danger');
            });
        }

        function removeFromWishlistDetails(productId, icon, text, button) {
            fetch('/Wishlist/Remove', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                },
                body: JSON.stringify({ productId: parseInt(productId) })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    icon.classList.remove('text-danger');
                    icon.classList.add('text-muted');
                    text.textContent = 'Add to Wishlist';
                    button.classList.remove('btn-danger');
                    button.classList.add('btn-outline-danger');
                    updateWishlistCount();
                    showMessage('Product removed from wishlist!', 'success');
                } else {
                    showMessage(data.message || 'Failed to remove from wishlist', 'danger');
                }
            })
            .catch(error => {
                console.error('Error removing from wishlist:', error);
                showMessage('An error occurred', 'danger');
            });
        }

        function addToCartWithQuantity(productId, quantity) {
            fetch('/Cart/Add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                },
                body: JSON.stringify({ 
                    productId: parseInt(productId),
                    quantity: parseInt(quantity)
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    updateCartCount();
                    showMessage(`${quantity} item(s) added to cart!`, 'success');
                } else {
                    showMessage(data.message || 'Failed to add to cart', 'danger');
                }
            })
            .catch(error => {
                console.error('Error adding to cart:', error);
                showMessage('An error occurred', 'danger');
            });
        }
    </script>
}
